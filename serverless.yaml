# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: edabackenddaii
service: eventify-eda-be

provider:
  name: aws
  runtime: python3.10
  region: us-east-1
  stage: dev
  role: arn:aws:iam::654654390511:role/LabRole
  vpc:
    securityGroupIds:
      - Ref: PublicSecurityGroup
    subnetIds:
      - Ref: PrivateSubnet1
      - Ref: PrivateSubnet2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource: "arn:aws:execute-api:us-east-1:*:*/*/*/@connections/*"
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:DeleteItem
        - dynamodb:Scan
        - dynamodb:GetItem
      Resource:
        - arn:aws:dynamodb:us-east-1:*:table/ConnectionsTable
        - arn:aws:dynamodb:us-east-1:*:table/EventsHistory
    - Effect: Allow
      Action:
        - sns:Publish
        - sns:Subscribe
        - sns:Receive
        - sns:ListTopics
      Resource:
        - '*'
           
# Incluir solo estos archivos, necesario para reducir el tamano del zip
package:
  patterns:
    - '!**'
    - 'api/rest.py'
    - 'api/websocket.py'
    - 'api/events.py'
    - 'requirements.txt'
    #- 'utils/save_url.py'

functions:
  AllEvents:
    name: AllEventsLambdaFunction 
    handler: api.events.lambda_handler
    package:
      individually: true

  WebsocketConnect:
    name: WebsocketConnect 
    handler: api.websocket.connect
    package:
      individually: true
    events:
      - websocket:
          route: $connect

  WebsocketDisconnect:
    name: WebsocketDisconnect
    handler: api.websocket.disconnect
    package:
      individually: true
    events:
      - websocket:
          route: $disconnect

  WebsocketDefault:
    name: WebsocketDefault
    handler: api.websocket.default
    package:
      individually: true
    events:
      - websocket:
          route: $default

  restApi:
    handler: api.rest.handler
    #package:
    #  individually: true
    #  patterns:
    #      - '!**'
    #      - 'api/rest.py'
    #      - 'requirements.txt'
    events:
      - http:
          path: /v1/events/history
          method: get
          cors: true
      - http:
          path: /v1/detail-types
          method: get
          cors: true
      - http:
          path: /docs
          method: get
          cors: true
      - http:
          path: /openapi.json
          method: get
          cors: true
      - http:
          path: /v1/health
          method: get
          cors: true

  # saveWebsocketUrl:
  #   handler: utils.save_url.lambda_handler
  #   package:
  #     individually: true
  #   timeout: 60

  ArtistTopic:
    name: ArtistTopicLambdaFunction
    handler: api.events.artist_topic_handler
    package:
      individually: true

  RecitalTopic:
    name: RecitalTopicLambdaFunction
    handler: api.events.recital_topic_handler
    package:
      individually: true

  TicketTopic:
    name: TicketTopicLambdaFunction
    handler: api.events.ticket_topic_handler
    package:
      individually: true

  WalletTopic:
    name: WalletTopicLambdaFunction
    handler: api.events.wallet_topic_handler
    package:
      individually: true

resources:
  Resources:
    MyVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsSupport: true
        EnableDnsHostnames: true

    InternetGateway:
      Type: AWS::EC2::InternetGateway

    AttachGateway:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId:
          Ref: MyVPC
        InternetGatewayId:
          Ref: InternetGateway

    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: MyVPC
        CidrBlock: 10.0.1.0/24
        MapPublicIpOnLaunch: true
        AvailabilityZone: us-east-1a

    PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: MyVPC
        CidrBlock: 10.0.2.0/24
        MapPublicIpOnLaunch: true
        AvailabilityZone: us-east-1b

    PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: MyVPC
        CidrBlock: 10.0.3.0/24
        MapPublicIpOnLaunch: false
        AvailabilityZone: us-east-1a

    PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: MyVPC
        CidrBlock: 10.0.4.0/24
        MapPublicIpOnLaunch: false
        AvailabilityZone: us-east-1b

    NatGatewayEIP:
      Type: AWS::EC2::EIP
      DependsOn: AttachGateway
      Properties:
        Domain: vpc

    NatGateway:
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId:
          Fn::GetAtt:
            - NatGatewayEIP
            - AllocationId
        SubnetId:
          Ref: PublicSubnet1

    PrivateRouteTable1:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: MyVPC

    PrivateRouteTable2:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: MyVPC

    PrivateRoute1:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId:
          Ref: PrivateRouteTable1
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId:
          Ref: NatGateway

    PrivateRoute2:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId:
          Ref: PrivateRouteTable2
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId:
          Ref: NatGateway

    SubnetRouteTableAssociationPrivate1:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: PrivateSubnet1
        RouteTableId:
          Ref: PrivateRouteTable1

    SubnetRouteTableAssociationPrivate2:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: PrivateSubnet2
        RouteTableId:
          Ref: PrivateRouteTable2

    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: MyVPC

    PublicRoute:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId:
          Ref: PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId:
          Ref: InternetGateway

    SubnetRouteTableAssociationPublic1:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: PublicSubnet1
        RouteTableId:
          Ref: PublicRouteTable

    SubnetRouteTableAssociationPublic2:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: PublicSubnet2
        RouteTableId:
          Ref: PublicRouteTable

    PublicSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow all inbound traffic
        VpcId:
          Ref: MyVPC
        SecurityGroupIngress:
          - IpProtocol: -1
            CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
          - IpProtocol: -1
            CidrIp: 0.0.0.0/0
  
    
    EventBusPolicy0:
      Type: AWS::Events::EventBusPolicy
      Properties:
        StatementId: "AllowEventsFromOtherSandboxes0"
        EventBusName: "default"
        Action: "events:PutEvents"
        Principal: "654654390511"

    # Permite a otras cuentas de AWS (sandboxes) enviar eventos a este EDA
    EventBusPolicy:
      Type: AWS::Events::EventBusPolicy
      Properties:
        StatementId: "AllowEventsFromOtherSandboxes1"
        EventBusName: "default"
        Action: "events:PutEvents"
        Principal: "747661705570"

    EventBusPolicy2:
      Type: AWS::Events::EventBusPolicy
      Properties:
        StatementId: "AllowEventsFromOtherSandboxes2"
        EventBusName: "default"
        Action: "events:PutEvents"
        Principal: "637423304975"

    EventBusPolicy3:
      Type: AWS::Events::EventBusPolicy
      Properties:
        StatementId: "AllowEventsFromOtherSandboxes3"
        EventBusName: "default"
        Action: "events:PutEvents"
        Principal: "842961581719"

    EventBusPolicy4:
      Type: AWS::Events::EventBusPolicy
      Properties:
        StatementId: "AllowEventsFromOtherSandboxes4"
        EventBusName: "default"
        Action: "events:PutEvents"
        Principal: "314146339911"

    EventBusPolicy5:
      Type: AWS::Events::EventBusPolicy
      Properties:
        StatementId: "AllowEventsFromOtherSandboxes5"
        EventBusName: "default"
        Action: "events:PutEvents"
        Principal: "185610718112"

    EventBusPolicy6:
      Type: AWS::Events::EventBusPolicy
      Properties:
        StatementId: "AllowEventsFromOtherSandboxes6"
        EventBusName: "default"
        Action: "events:PutEvents"
        Principal: "996851032909"

    EventBusPolicy7:
      Type: AWS::Events::EventBusPolicy
      Properties:
        StatementId: "AllowEventsFromOtherSandboxes7"
        EventBusName: "default"
        Action: "events:PutEvents"
        Principal: "201596100553"

    EventBusPolicy8:
      Type: AWS::Events::EventBusPolicy
      Properties:
        StatementId: "AllowEventsFromOtherSandboxes8"
        EventBusName: "default"
        Action: "events:PutEvents"
        Principal: "416160473082"

    EventBusPolicy9:
      Type: AWS::Events::EventBusPolicy
      Properties:
        StatementId: "AllowEventsFromOtherSandboxes9"
        EventBusName: "default"
        Action: "events:PutEvents"
        Principal: "865820275928"

    EventBusPolicy10:
      Type: AWS::Events::EventBusPolicy
      Properties:
        StatementId: "AllowEventsFromOtherSandboxes10"
        EventBusName: "default"
        Action: "events:PutEvents"
        Principal: "654654390511"

    EventBusPolicy11:
      Type: AWS::Events::EventBusPolicy
      Properties:
        StatementId: "AllowEventsFromOtherSandboxes11"
        EventBusName: "default"
        Action: "events:PutEvents"
        Principal: "495599758261"

    EventBusPolicy12:
      Type: AWS::Events::EventBusPolicy
      Properties:
        StatementId: "AllowEventsFromOtherSandboxes12"
        EventBusName: "default"
        Action: "events:PutEvents"
        Principal: "381492170463"
    
    EventBusPolicy13:
      Type: AWS::Events::EventBusPolicy
      Properties:
        StatementId: "AllowEventsFromOtherSandboxes13"
        EventBusName: "default"
        Action: "events:PutEvents"
        Principal: "746162069331"

    EventBusPolicy14:
      Type: AWS::Events::EventBusPolicy
      Properties:
        StatementId: "AllowEventsFromOtherSandboxes14"
        EventBusName: "default"
        Action: "events:PutEvents"
        Principal: "533267034688"

    EventBusPolicy15:
        Type: AWS::Events::EventBusPolicy
        Properties:
          StatementId: "AllowEventsFromOtherSandboxes15"
          EventBusName: "default"
          Action: "events:PutEvents"
          Principal: "533267277817"

    EventBusPolicy16:
        Type: AWS::Events::EventBusPolicy
        Properties:
          StatementId: "AllowEventsFromOtherSandboxes16"
          EventBusName: "default"
          Action: "events:PutEvents"
          Principal: "195739780677"

    EventBusPolicy17:
        Type: AWS::Events::EventBusPolicy
        Properties:
          StatementId: "AllowEventsFromOtherSandboxes17"
          EventBusName: "default"
          Action: "events:PutEvents"
          Principal: "578340619573"
    
    EventBusPolicy18:
        Type: AWS::Events::EventBusPolicy
        Properties:
          StatementId: "AllowEventsFromOtherSandboxes18"
          EventBusName: "default"
          Action: "events:PutEvents"
          Principal: "536914812661"
    
    EventBusPolicy19:
        Type: AWS::Events::EventBusPolicy
        Properties:
          StatementId: "AllowEventsFromOtherSandboxes19"
          EventBusName: "default"
          Action: "events:PutEvents"
          Principal: "637423205166"

    EventBusPolicy20:
        Type: AWS::Events::EventBusPolicy
        Properties:
          StatementId: "AllowEventsFromOtherSandboxes20"
          EventBusName: "default"
          Action: "events:PutEvents"
          Principal: "042934109592"

    EventBusPolicy21:
        Type: AWS::Events::EventBusPolicy
        Properties:
          StatementId: "AllowEventsFromOtherSandboxes21"
          EventBusName: "default"
          Action: "events:PutEvents"
          Principal: "984713860769"

    EventBusPolicy22:
        Type: AWS::Events::EventBusPolicy
        Properties:
          StatementId: "AllowEventsFromOtherSandboxes22"
          EventBusName: "default"
          Action: "events:PutEvents"
          Principal: "635632725827"

    EventBusPolicy23:
        Type: AWS::Events::EventBusPolicy
        Properties:
          StatementId: "AllowEventsFromOtherSandboxes23"
          EventBusName: "default"
          Action: "events:PutEvents"
          Principal: "849528710182"

    EventBusPolicy24:
        Type: AWS::Events::EventBusPolicy
        Properties:
          StatementId: "AllowEventsFromOtherSandboxes24"
          EventBusName: "default"
          Action: "events:PutEvents"
          Principal: "321719814614"

    EventBusPolicy25:
        Type: AWS::Events::EventBusPolicy
        Properties:
          StatementId: "AllowEventsFromOtherSandboxes25"
          EventBusName: "default"
          Action: "events:PutEvents"
          Principal: "836662020520"

    ConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ConnectionsTable
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    
    EventsHistoryTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: EventsHistory
        AttributeDefinitions:
          - AttributeName: eventId
            AttributeType: S
        KeySchema:
          - AttributeName: eventId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    # ApiGatewayBasePathMapping:
    #   Type: AWS::ApiGateway::BasePathMapping
    #   Properties:
    #     DomainName: deliver.ar
    #     RestApiId:
    #       Ref: ApiGatewayRestApi

    AllEventsEventBridgeRule:
      Type: AWS::Events::Rule
      Properties:
        Name: AllEventsEventRule 
        EventBusName: default
        EventPattern:
          source: 
            - "*"
            - "artist-module"
            - "tickets-module"
            - "blockchain-module"
            - "wallet-module"
            - "analytics-module"
            - "ldap-module"
        Targets:
          - Arn:
              Fn::GetAtt: [AllEventsLambdaFunction, Arn]
            Id: AllEventsEventTarget 

    AllEventsLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: 
          Ref: AllEventsLambdaFunction
        Action: lambda:InvokeFunction
        Principal: events.amazonaws.com
        SourceArn: 
          Fn::GetAtt: 
            - AllEventsEventBridgeRule
            - Arn

    ArtistTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: artist-topic

    ArtistTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        Topics:
          - Ref: ArtistTopic
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: "*"
              Action:
                - "sns:Subscribe"
              Resource: 
                - !Ref ArtistTopic
              Condition:
                StringEquals:
                  aws:PrincipalAccount:
                    - "747661705570"
                    - "637423304975"
                    - "842961581719"
                    - "314146339911"
                    - "185610718112"
                    - "996851032909"
                    - "201596100553"
                    - "416160473082"
                    - "865820275928"
                    - "654654390511"
                    - "495599758261"
                    - "381492170463"
                    - "746162069331"
                    - "533267034688"
                    - "533267277817"
                    - "195739780677"
                    - "578340619573"
                    - "536914812661"
                    - "637423205166"
                    - "042934109592"
                    - "984713860769"
                    - "635632725827"
                    - "849528710182"
                    - "321719814614"
                    - "836662020520"

    ArtistTopicEventBridgeRule:
      Type: AWS::Events::Rule
      Properties:
        Name: ArtistTopicEventBridgeRule
        EventPattern:
          source:
            - artist-module
            - ldap-module
            - wallet-module
            - tickets-module
          detail-type:
            - artist.profile.created
            - artist.registration
        Targets:
          - Arn:
              Fn::GetAtt: [ArtistTopicLambdaFunction, Arn]
            Id: TargetFunction

    ArtistTopicLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: 
          Ref: ArtistTopicLambdaFunction
        Action: lambda:InvokeFunction
        Principal: events.amazonaws.com
        SourceArn: 
          Fn::GetAtt: 
            - ArtistTopicEventBridgeRule
            - Arn

    RecitalTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: recital-topic

    RecitalTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        Topics:
          - Ref: RecitalTopic
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: "*"
              Action:
                - "sns:Subscribe"
              Resource: 
                - !Ref RecitalTopic
              Condition:
                StringEquals:
                  aws:PrincipalAccount:
                    - "747661705570"
                    - "637423304975"
                    - "842961581719"
                    - "314146339911"
                    - "185610718112"
                    - "996851032909"
                    - "201596100553"
                    - "416160473082"
                    - "865820275928"
                    - "654654390511"
                    - "495599758261"
                    - "381492170463"
                    - "746162069331"
                    - "533267034688"
                    - "533267277817"
                    - "195739780677"
                    - "578340619573"
                    - "536914812661"
                    - "637423205166"
                    - "042934109592"
                    - "984713860769"
                    - "635632725827"
                    - "849528710182"
                    - "321719814614"
                    - "836662020520"

    RecitalTopicEventBridgeRule:
      Type: AWS::Events::Rule
      Properties:
        Name: RecitalTopicEventBridgeRule
        EventPattern:
          source:
            - artist-module
            - tickets-module
            - wallet-module
          detail-type:
            - recital.created
            - recital.updated
            - recital.deleted
        Targets:
          - Arn:
              Fn::GetAtt: [RecitalTopicLambdaFunction, Arn]
            Id: TargetFunction

    RecitalTopicLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: 
          Ref: RecitalTopicLambdaFunction
        Action: lambda:InvokeFunction
        Principal: events.amazonaws.com
        SourceArn: 
          Fn::GetAtt: 
            - RecitalTopicEventBridgeRule
            - Arn
    
    TicketTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ticket-topic

    TicketTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        Topics:
          - Ref: TicketTopic
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: "*"
              Action:
                - "sns:Subscribe"
              Resource: 
                - !Ref TicketTopic
              Condition:
                StringEquals:
                  aws:PrincipalAccount:
                    - "747661705570"
                    - "637423304975"
                    - "842961581719"
                    - "314146339911"
                    - "185610718112"
                    - "996851032909"
                    - "201596100553"
                    - "416160473082"
                    - "865820275928"
                    - "654654390511"
                    - "495599758261"
                    - "381492170463"
                    - "746162069331"
                    - "533267034688"
                    - "533267277817"
                    - "195739780677"
                    - "578340619573"
                    - "536914812661"
                    - "637423205166"
                    - "042934109592"
                    - "984713860769"
                    - "635632725827"
                    - "849528710182"
                    - "321719814614"
                    - "836662020520"

    TicketTopicEventBridgeRule:
      Type: AWS::Events::Rule
      Properties:
        Name: TicketTopicEventBridgeRule
        EventPattern:
          source:
            - artist-module
            - tickets-module
            - wallet-module
            - blockchain-module
          detail-type:
            - ticket.purchase
            - ticket.repurchase
            - ticket.reimburse
        Targets:
          - Arn:
              Fn::GetAtt: [TicketTopicLambdaFunction, Arn]
            Id: TargetFunction

    TicketTopicLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: 
          Ref: TicketTopicLambdaFunction
        Action: lambda:InvokeFunction
        Principal: events.amazonaws.com
        SourceArn: 
          Fn::GetAtt: 
            - TicketTopicEventBridgeRule
            - Arn
    
    WalletTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: wallet-topic

    WalletPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        Topics:
          - Ref: WalletTopic
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: "*"
              Action:
                - "sns:Subscribe"
              Resource: 
                - !Ref WalletTopic
              Condition:
                StringEquals:
                  aws:PrincipalAccount:
                    - "747661705570"
                    - "637423304975"
                    - "842961581719"
                    - "314146339911"
                    - "185610718112"
                    - "996851032909"
                    - "201596100553"
                    - "416160473082"
                    - "865820275928"
                    - "654654390511"
                    - "495599758261"
                    - "381492170463"
                    - "746162069331"
                    - "533267034688"
                    - "533267277817"
                    - "195739780677"
                    - "578340619573"
                    - "536914812661"
                    - "637423205166"
                    - "042934109592"
                    - "984713860769"
                    - "635632725827"
                    - "849528710182"
                    - "321719814614"
                    - "836662020520"

    WalletTopicEventBridgeRule:
      Type: AWS::Events::Rule
      Properties:
        Name: WalletTopicEventBridgeRule
        EventPattern:
          source:
            - artist-module
            - wallet-module
            - blockchain-module
            - tickets-module
          detail-type:
            - wallet.balance
            - wallet.promotions
            - wallet.payment.crypto
            - wallet.payment.pesos
            - wallet.transfer.ticket
            - wallet.transfer.crypto
            - wallet.payment.salary
            - wallet.repurchase.paid

        Targets:
          - Arn:
              Fn::GetAtt: [WalletTopicLambdaFunction, Arn]
            Id: TargetFunction

    WalletTopicLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: 
          Ref: WalletTopicLambdaFunction
        Action: lambda:InvokeFunction
        Principal: events.amazonaws.com
        SourceArn: 
          Fn::GetAtt: 
            - WalletTopicEventBridgeRule
            - Arn

plugins:
  - serverless-python-requirements
  - serverless-scriptable-plugin
  - serverless-domain-manager

custom:
  pythonRequirements:
    dockerizePip: non-linux
    useDownloadCache: true
    useStaticCache: true

  customDomain:
    rest:
      domainName: edaapi8.deliver.ar
      stage: dev
      basePath: ''
      certificateName: '*.deliver.ar'
      createRoute53Record: false
      endpointType: REGIONAL
      securityPolicy: tls_1_2
      apiType: rest

    websocket:
      domainName: edaws8.deliver.ar
      stage: dev
      basePath: ''
      certificateName: '*.deliver.ar'
      createRoute53Record: false
      endpointType: REGIONAL
      securityPolicy: tls_1_2
      apiType: websocket

  #scriptHooks:
    #after:deploy:finalize: 'aws lambda invoke --function-name eventify-eda-be-dev-saveWebsocketUrl --log-type Tail outfile.txt'